generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CITIZEN
  NGO
  GOVT
  NSS
  ADMIN
}

enum IssueStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}


model Issue {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  category    String
  status      IssueStatus @default(PENDING)
  location    String?
  imageUrl    String?
  priority    String   @default("medium") // high, medium, low
  aiPriority  String?  // AI suggested priority
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Created by a citizen
  createdById String   @db.ObjectId
  createdBy   User     @relation("CreatedIssues", fields: [createdById], references: [id])

  // Assigned to different roles
  assignedNgoId  String? @db.ObjectId
  assignedNgo    User?   @relation("NgoAssignedIssues", fields: [assignedNgoId], references: [id])

  assignedGovtId String? @db.ObjectId
  assignedGovt   User?   @relation("GovtAssignedIssues", fields: [assignedGovtId], references: [id])

  assignedNssId  String? @db.ObjectId
  assignedNss    User?   @relation("NssAssignedIssues", fields: [assignedNssId], references: [id])

  comments Comment[]
  @@map("issue")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  name          String
  role          Role     @default(CITIZEN)
  emailVerified Boolean  @default(false)
  image         String?
  password      String?  // Hashed password for email auth
  phoneNumber   String?  @unique
  address       String?
  bio           String?
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // NGO specific fields
  organizationId      String?
  registrationNumber  String?
  description        String?

  // Relations
  createdIssues          Issue[]  @relation("CreatedIssues")
  ngoAssignedIssues      Issue[]  @relation("NgoAssignedIssues")
  govtAssignedIssues     Issue[]  @relation("GovtAssignedIssues")
  nssAssignedIssues      Issue[]  @relation("NssAssignedIssues")
  comments               Comment[]
  sessions               Session[]
  resetTokens           PasswordReset[]

  @@map("user")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  issueId   String   @db.ObjectId
  issue     Issue    @relation(fields: [issueId], references: [id])
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])

  @@map("comment")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isValid   Boolean  @default(true)

  @@unique([token])
  @@map("session")
}

model PasswordReset {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  token       String   @unique
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("password_reset")
}

model Verification {
  id         String    @id @map("_id")
  identifier String    // email or phone
  token      String    @unique
  type       String    // email, phone
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}
