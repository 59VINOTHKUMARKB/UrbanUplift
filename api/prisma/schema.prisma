generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CITIZEN
  NGO
  GOVT
  NSS
  ADMIN
}

enum IssueStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

model Issue {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  description String
  category    String
  status      IssueStatus @default(PENDING)
  location    String?
  imageUrl    String?
  priority    String      @default("medium") // high, medium, low
  aiPriority  String?     // AI suggested priority
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Created by a citizen
  createdById String   @db.ObjectId
  createdBy   User     @relation("CreatedIssues", fields: [createdById], references: [id])

  // Assigned to different roles
  assignedNgoId  String? @db.ObjectId
  assignedNgo    User?   @relation("NgoAssignedIssues", fields: [assignedNgoId], references: [id])

  assignedGovtId String? @db.ObjectId
  assignedGovt   User?   @relation("GovtAssignedIssues", fields: [assignedGovtId], references: [id])

  assignedNssId  String? @db.ObjectId
  assignedNss    User?   @relation("NssAssignedIssues", fields: [assignedNssId], references: [id])

  // Additional fields for tracking
  department     String?  // For government department assignment
  expectedResolution DateTime?
  resolvedAt    DateTime?
  resolutionNotes String?
  
  // Feedback and ratings
  citizenFeedback String?
  citizenRating   Int?    @default(0) // 1-5 rating
  
  // Location details
  coordinates String? // Latitude, longitude
  address     String?
  district    String?
  state       String?
  pincode     String?

  comments    Comment[]

  @@map("issue")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String
  role          Role      @default(CITIZEN)
  emailVerified Boolean   @default(false)
  image         String?
  password      String?   // Hashed password for email auth
  phoneNumber   String?   // Removed @unique constraint
  address       String?
  bio           String?
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NGO specific fields
  organizationId      String?
  registrationNumber  String?
  description        String?
  
  // Government specific fields
  employeeId   String?
  department   String?
  designation  String?
  
  // College specific fields
  collegeId    String?
  collegeRole  String?
  
  // Common fields for organizations
  website      String?
  socialMedia  Json?    // Store social media links
  documents    Json?    // Store verification document links

  // Relations
  createdIssues          Issue[]  @relation("CreatedIssues")
  ngoAssignedIssues      Issue[]  @relation("NgoAssignedIssues")
  govtAssignedIssues     Issue[]  @relation("GovtAssignedIssues")
  nssAssignedIssues      Issue[]  @relation("NssAssignedIssues")
  comments               Comment[]

  // Stats and metrics
  issuesResolved Int     @default(0)
  averageRating  Float   @default(0)
  responseTime   Float   @default(0) // Average response time in hours
  @@map("user")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  issueId   String   @db.ObjectId
  issue     Issue    @relation(fields: [issueId], references: [id])
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])

  // Additional fields
  attachments Json?  // Store attachment links
  isEdited    Boolean @default(false)
  editedAt    DateTime?

  @@map("comment")
}


